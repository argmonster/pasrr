'*******************************************************************************
'    SCRIPT DESCRIPTION
'       This script is for creating billable PASRR Services.  It finds 
'        service code 554 event between two events with the same service
'        code that has zero client & staff time, recipient code of 9,
'        attendance code of 9, number of recipients equal to 0, &
'        a location code of 1.  It will roll up the client & staff time
'        for all the services between the starting & ending service & 
'        create a new service that looks like the last service, but with
'        a service code of 555 (changeable), the total client, & staff time.
'
'        It has been placed on menu ### line ##.  Reference Heat ticket ######.
'=================================================
'    ASSUMPTIONS
'       There are two serices that match the above critera that box/enclose the
'       services that need to be rolled-up.  Services found out side of the
'       box/enclose events are concidered errors.  The services should not be
'       more than 14 (changeable) days.
'=================================================
'    PARAMETERS
'        NONE
'=================================================
'    AUTHOR: Robert Bell
'    DATE CREATED: 05/31/2013
'=================================================
'    DATABASES INVOLVED:
'        00 - Events
'
'    DSTS READ:
'   00001  E.STAFF          - Staff Register ID
'   00002  E.DATE           - Service Date
'   00003  E.START          - Service start time of day
'   00004  E.CASE.NO        - Client Register ID
'   00005  E.SER            - Service code
'   00006  E.DESC           - Service Code Desciption/Note
'   00007  E.RU             - Service Reporting Unit
'   00008  E.DUR            - Staff duration/time
'   00010  E.CL.DUR         - Client duration/time
'   00014  E.COMP.FEE       - Computed Fee (Expected Payment)
'   00015  E.FS             - Service Funding Source
'   00017  E.POST.FLG       - Y/N Flag for posted to GL
'   00019  E.BILL.FLG       - Y/N Flag for service billed
'   00021  E.BILL.ST        - Status code for billing
'   00032  E.ATT            - Attendance code
'   00033  E.RECIP          - Recipient code
'   00034  E.LOC            - Location Code
'   00035  E.PROJ           - Project Code
'=================================================
'    Updates
'=================================================
'  Bob 6/6/2013 0.1
'     + errors for when we don?t have the two wrapper services.
'     + Marking the wrapper services as being billed
'     Todo:
'        ~ Rolling up the IDT time that could be up to 14 days after the PE referral date.
'        ~ Edit for Test/Production prompt
'
'  Bob 6/6/2013 0.1.1
'     + edit for the test / production prompt
'     ^ fixed problem with the checkTimes()
'
'  Tim 6/7/2013 0.2.0
'     + standard script arguments
'     + skip ui option
'     + skip report option
'
'  Tim 6/7/2013 0.2.1
'     + get client ids from saved list or list[] argument
'     ~ client error message to use array err_idlist[] to allow messages options
'     + flag_* options for setting definition of start/stop flag services
'     + wrap-delim() function
'     + reset-counters() function
'     ~ moved out of date range processing to inside roll-up service block
'
' Tim 6/7/2013 0.2.1.1
'     ~ fix the compile errors
'
' Tim 6/7/2013 0.2.2
'     ~ rollupErKey -> billErKey for clarity
'        "Bill" event = event used to generate bill
'        "roll-up" event = event with staff and client time that is used to create total time to bill
'        "flag" event = event used to flag the 'start' and 'stop' date range of 'roll-up' events to find
'     ~ Moved markErKey[] logic block from 'flag' processing block to non-'bill' processing block
'     + logic to track earliest f2f roll-up event for use when creating 'bill' event
'        + isF2F() function
'
' Tim 6/10/2013 0.3
'     ~ Changed core bill event totaling logic to allow for different types of events that happen within
'        flag events to roll up to unique billing events
'        = this allows billing of a PE as seperate items for pieces of the PE that require billing modifiers
'     + Roll up events are configured to roll up to matching bill events.
'     + getIndex() to allow for PE type differentiation based on SAC or RU field
'     + allmatch{} to check to see which PE type differentiation method is used (SAC or RU)
'
' Tim 6/11/2013 0.3.1
'     + allowNoFlag option - when set to "Y" the script will roll up all 'roll up' events found through 'enddate'
'     + allow single client id to be passed in list[] argument.
'
' Tim 6/11/2013 0.3.1.1
'     ^ compiler error fixes
'     + default start and end date
'     ^ moved service roll up loop outside of event loop to ensure that services get rolled up when allowNoFlag = Y
'
' Tim 6/28/2013 0.3.2
'     ~ changed roll up function to match the first face to face service by service type -- instead of globally
'
' Tim 7/1/2013 0.3.3
'     + rounding options:
'        roundTime = minutes to round to; default = 15
'        timeToRound = use the client or staff time for the rounded time; default = "STAFF"
'        cltUseRoundTime = override the client time with the rounded time; default = "Y"
'        stfuseRoundTime = override the staff time with the rounded time; default = "N"
'        isnUseRoundTime = add layer to $$isn.rdur with rounded time; default = "Y"
'
'        !rounding options get processed after the initial event creation to ensure that the event and isn
'           are initially created with non-rounded times. If rounding option is used the event is fee re-calced 
'           and updated with the new times and fees.

' Ralph 7/5/2013 0.3.4
'        + ISN Creation Feature
'           Added logic to the createNewEvent function to check if the ISN ($isnfind) has been created.  
'           If not, create the ISN ($isncreate) immediately after the $insertevent fucntion
'           If the ISNUseRoundTime is set to "Y" and the ISN isn't present, the script will stop running and this occurs before the 
'           events needing to be rolled up have the bill flag(s) set to "Y".
'
' Tim 7/29/2013 0.3.5
'     ^ fixed issue with $ertoarray() and $sort() that was breaking the er keys



%const MaxPEDays 14         ' Maximum days for PE to be complete

%version 0.3.5 7/29/2013
start PASRRBilling(parmfile, option, list[], retcode)

parmfile             is alpha
option               is alpha
list[]               is alpha
retcode              is binary

'variable declarations
promptIdx            is binary   'Prompt index pointer
maxPrompts           is binary   'Number of prompts
clientIds[]          is alpha    'list of client ids that have events in date range
validServices[]      is binary   'List of service codes to process
arrayIndex           is binary   'Array Index pointer

'options
clientdb             is binary
runMode              is alpha    'Production/Test indicator
startDate            is date     'Start Date of events being pulled
endDate              is date     'End Date of events being pulled
runModeEdit         is alpha    'Associate code&descriptions to runMode variable
'startDate      ?  ?  is date     'Start Date of events being pulled
'endDate        ?  ?  is date     'End Date of events being pulled
skipUI               is alpha    'skip user interface
skipReport           is alpha    'skip report generation
modecode[]           is alpha
modedesc[]           is alpha

''flag' event configuration
flag_sac             is binary
flag_ru              is binary
flag_dur             is time
flag_client_dur      is time
flag_recip           is alpha
flag_att             is alpha
flag_loc             is alpha

roll_sacs[]          is binary
roll_rus[]           is binary
bill_sacs[]          is binary

'time rounding configuration
roundTime         is binary
timeToRound       is alpha
cltUseRoundTime   is alpha
stfUseRoundTime   is alpha
isnUseRoundTime   is alpha

'face to face configuration
f2f_att              is alpha
f2f_recip            is alpha
f2f_loc              is alpha

'messaging options 
err_idlist_def       is alpha
err_idlist[]         is alpha

'private options
do-ui                is alpha
t-sac                is alpha
t-ru                 is alpha
MsgString            is alpha    'Temporary String

' report info
reportNbr            is binary   'Report handle
hdr[]                is alpha    'Report header variable
printString          is alpha    'Output Line

er_to_skip[]         is alpha    'list of er keys to skip processing
'Current Event Arrays
estaff[]             is alpha    'event staff
edesc[]              is alpha    'event description
edate[]              is date     'event date
estart[]             is time     'event time
eclient[]            is alpha    'event client id
eser[]               is binary   'event service code
eduration[]          is time     'event staff duration
eclient-duration[]   is time     'event client duration
eru[]                is binary   'event RU
eproj[]              is binary   'event project code
elocation[]          is alpha    'event location code
efs[]                is binary   'event funding source
eatt[]               is alpha    'event attendance code
erecip[]             is alpha    'event recipient code
ebillFlag[]          is alpha    'event billing flag
ecompFee[]           is numeric  'event computed fee
ekey[]               is alpha    'event key
eskip[]              is alpha    'Y|!Y skip this event

numclients           is binary   'total number of clients
nbrevents            is binary   'Number of Events for a Client
nbrclients           is numeric  'Number of Clients Read
evtCreatedCtr        is numeric  'Number of Events Created
foundEvent           is binary   'Flag for found a event
skipEvent            is binary   'counter for skipped events

eventloop            is binary   'Counter for Event Loop

rc                   is binary   'Results of I/O calls
WinNum               is binary   'holds the window number.
done                 is alpha    'are we done asking input

billErKey[]          is alpha    'Event Key for existing Roll-Up Service
startErKey           is alpha    'Event Key for first PE service
endErKey             is alpha    'Event Key for last PE service
endErDate            is date     'Event last PE service date
erkeyIndex           is binary   'Saved Event Key array Index

markErKey[,]          is alpha    'Event Keys to mark when rolled up
markErDate[,]         is date
markErF2F[,]          is alpha
f2fIndex[]            is binary
pe-date[]             is date
bill-ser[]            is binary

billedStaffTime[]     is binary   'Total Billed Staff Time
billedClientTime[]    is binary   'Total Billed Client Time
unbilledStfTime[]     is binary   'Total Unbilled Staff Time
unbilledCltTime[]     is binary   'Total Unbilled Client Time

serviceIndex          is binary
serviceType           is alpha

allowNoFlags         is alpha
skip_billed          is alpha
skip_rolled          is alpha

'variable initializations
clientDb = 2
$looplimit = 0       ' Max Number of Loops to Make
nbrClients = 0       ' Initialize the Client count
numClients = 0
nbrEvents  = 0       ' Number of events for one client
evtCreatedCtr = 0    ' Number of events created

' Load the services codes that are valid -- these should be configured to your orgs specifications
roll_Sacs[1] = 6811
roll_rus[1] = 5440
bill_Sacs[1] = 6810

roll_Sacs[2] = 6813
roll_rus[2] = 5440
bill_Sacs[2] = 6812

' build edit for Test/Production runMode
promptIdx = 0
$clear(modeCode[], modeDesc[])
modeCode[++promptIdx] = "T"     modeDesc[promptIdx] = "Test"
modeCode[++promptIdx] = "P"     modeDesc[promptIdx] = "Production"

err_idlist_def = "Unknown error (99)... please contact IT"
err_idlist[1] = "Sorry... No services or clients found for that date range"
err_idlist[2] = "Too many clients found... use smaller date range"
err_idlist[3] = "Please correct your date range"
err_idlist[4] = "Too many clients found... use smaller date range"

'flag event options:
flag_sac = 5330
flag_ru = 5440
flag_dur = 0
flag_client_dur = 0
flag_recip = "9"
flag_att = "9"
flag_loc = "1" 

'f2f config
f2f_att = "1,2,3,4"
f2f_recip = "1,4,5,6"
f2f_loc = "1,2,3,4,5,6,7,9"

enddate = $today
startdate = $today - 365 '180

'rounding config
roundTime = 15
timeToRound = "STAFF"
cltUseRoundTime = "Y"
stfUseRoundTime = "Y"
isnUseRoundTime = "N"


getParm(parmfile)
getoption(option)

'create master list of services
rc = $arraymerge(validservices[], bill_Sacs[], roll_Sacs[])
rc = $arrPush(validservices[], flag_sac)

'determine the 'service type' based on the configurations:
if allmatch(flag_sac, roll_sacs[]) = "N" then 
   'we are using service codes to diff id and mi services
   serviceType = "SAC"
elseif allmatch(flag_ru, roll_rus[]) = "N" then
   'we are using rus to diff id and mi services
   serviceType = "RU"
else
   serviceType = "ERROR"
   return
endif
   
'prep delimited strings for $find()
f2f_att = delim-wrap(f2f_att, ",")
f2f_recip = delim-wrap(f2f_recip, ",")
f2f_loc = delim-wrap(f2f_loc, ",")

allowNoFlags = $uc(allowNoFlags)

'some option processing
(void) $edittbl(runModeEdit,runMode,modeCode[],modeDesc[],"Run Mode")

if $operioallow = "Y" and $uc(skipUI) != "Y" then do-UI = "Y" endif

if do-UI = "Y" then
   if $BUI = "Y" then
      'do bui
   else
      $openwin(WinNum, 5, 17, 15, 65)
      $disp( "Find PASRR Events", 6, 34,,"HE")
      $disp( "*****************", 7, 34,,"H")
      
      promptIdx = 1
      maxPrompts = 4
      do while promptIdx <= maxPrompts
         select promptIdx
            case 1
               $disp( "Test(T) or Production Mode(P)?", 8, 18,,"H")
               $acpt( runMode,  8, 50,,"X")
            case 2
               $disp( "Start Date:", 9, 18,,"H")
               $acpt( startDate,     9, 41,,"DATE``PW")
      
               'check if date range is valid
               if  $acptkey <> "F9"
               and startDate < $date("05/24/2013") then
                  $disp( "Must be after 05/23/2013.",13,18,50,"H")
                  $acptkey = "NO-ENTRY"
               else
                  ' Clear the error message
                  $disp( "",13,18,50,"H")
               endif
      
            case 3
               $disp( "End Date:", 10, 18,,"H")
               $acpt( endDate,     10, 41,,"DATE``CW")
      
                'check if date range is valid
                if  $acptkey <> "F9"
                and endDate < startDate then
                   $disp( "Invalid Date Range.",13,18,50,"H")
                   $acptkey = "NO-ENTRY"
                else
                   ' Clear the error message
                   $disp( "",13,18,50,"H")
                endif
            case 4
               $disp( "Finished?", 12, 18,,"H")
               $acpt( done,        12, 41, 1,"YN")
            case other
               $errmsg1 = "Went past end of prompts"
               return      ' Exit this script
         endselect
      
            ' check end key
         select $acptkey
            case "NO-ENTRY"         ' No User Input
            case "F9"
               promptIdx--       ' Go back a prompt
               if promptIdx < 1 then
                  return            ' Exit this program
               endif
            case other
               promptIdx++       ' Next Prompt
         endselect
      enddo
      $disp( "=================================================",13,16,50,"H")
      
      if $uc(done) = "N" then
          $closewin(WinNum)   ' Close the Text window
         return      ' Exit this script
      endif
   endif
endif


'PQ Report
if skipReport != "Y" then
   $clear(hdr[])
   if (runMode = "P") then
      hdr[1] = "Date: ^DATE^^C^PASRR Billing Report^R^Page: ^PAGE^"                        ' Header Line 1
   else
      hdr[1] = "Date: ^DATE^^C^PASRR Billing Report (Test Mode)^R^Page: ^PAGE^"            ' Header Line 1
   endif
   hdr[2] = "Time: ^TIME^^C^" + $format(startDate, endDate, "MM/DD/YY-MM/DD/YY")       ' Header Line 2
   hdr[3] = ""                               ' Header Blank Line
   hdr[4] = "S Client    Staff    Date    Time  Ser  SDur  CDur   RU   Loc Computed Fee FS  ATT  RC  Proj BFlg      ER-Key"
   hdr[5] = "- *-------* *----* *------* *----* *--* *---* *----* *--* *-* *----------* *-* *-* *--* *--* *--* *-------------------*"
   
   'open report - 60 lines per page
   reportNbr = $reportavail()
   if reportNbr = 0 then
       $errmsg1 = "Unable to get a report number"
       return
   else
       if $report(reportNbr,"PASRR Billing Report",hdr[],60,132) != 0 then
           $errmsg1 = "Unable to create a report"
           return
       endif
   endif
endif

'display prompt & get client list
if do-ui = "Y" then
   if $BUI = "Y" then
      'bui
   else
      $disp( "Find PASRR Events", 6, 34,,"HE")
      $disp( "*****************", 7, 34,,"H")
      $disp("Getting the Client List...", 16,18,,"H")
   endif
endif

rc = 0
if $maxarray(list[]) = 1 then
   if $dbpoint(clientdb, list[]) < 3 then       'is it a single client?
      rc = 0
      clientIds[] = list[]
   else                                         ' is it a saved list?
      rc = $getlist(clientids[], clientDb, list[])
   endif
else
   clientIds[] = list[]
endif
   
if clientIds[] !dp then
   rc = $eventclients(clientIds[], startDate, endDate, "IB")
endif

if rc > 0 then
   if err_idlist[rc] !dp then err_idlist[rc] = $format(rc, err_idlist_def) endif
   $errmsg1 = err_idlist[rc]
    return
endif

'*******************************************************************************
'get number of clients
numclients = $maxarray(clientIds[])

'Display title
if do-ui = "Y" then
   if $BUI = "Y" then
      'bui
   else
      $disp("No of Clients to Process : ", 8,18,,"H")
      $disp("       Clients Processed : ", 9,18,,"H")
      $disp("     Total Events Created: ",10,18,,"H")
      $disp("=================================================",11,16,,"H")
      $disp("          Current Client : ",12,18,,"H")
      $disp("     Total No. of Events : ",13,18,,"H")
      '$disp("          Events created : ",14,18,,"H")
      $disp("=================================================",15,16,,"H")
      $disp("Please wait while the events are created...",16,18,,"H")
      $disp($format(numclients, "ZZZ,ZZ9"), 8,45,,)
   endif
endif

'loop through each client in array
nbrclients = 0
do while (++nbrclients <= numclients)

   if do-ui = "Y" then
      if $BUI = "Y" then
      else
         $disp($format(nbrclients, "ZZZ,ZZ9"), 9,45,,)
         $disp(clientIds[nbrclients],12,45,,)
      endif
   endif 

   'do not process group ids
   if clientIds[nbrclients] < "A" then
      ' Clear the flags
      reset-counters(billErKey[], startErKey, endErKey, markErKey[], endErDate, erkeyIndex, 
                     billedStaffTime[], billedStaffTime[], unbilledStfTime[], unbilledCltTime[], f2fIndex[])

      $clear(pe-date[], bill-ser[])
      
      'reset the loop count
      $loopcount = 0
      $clear(estaff[],edate[],edesc[],estart[],eclient[],eser[],eduration[],eclient-duration[],eru[],eproj[],
                        elocation[],efs[],eatt[],erecip[],ecompFee[],ebillFlag[],ekey[])

      rc = $ertoarray(,clientIds[nbrclients],startDate,endDate,estaff[],,,edate[],estart[],eclient[],,,eser[],
                            eduration[],,eclient-duration[],eru[],eproj[],elocation[],,,ekey[],,,,efs[],,eatt[],
                            erecip[],,,,ecompFee[],,ebillFlag[],,,,,,,,,,,,,,edesc[])
      
      if (rc = 0) then 'process only if events found
         
         rc = 0
         do while rc++ < $maxarray(ekey[])
            ekey[rc] = $erkeyx(ekey[rc])
            if $find(ekey[rc], er_to_skip[], 1, "F") > 0 then
               eskip[rc] = "Y"
            endif 
            'exclude previously billed items
            'needed for multiple episodes of pasrr
            if skip_billed = "Y" and ebillFlag[rc] = "Y" then
               $clear(edate[rc],estart[rc],eclient[rc],eduration[rc],ekey[rc],eser[rc],eclient-duration[rc],estaff[rc],
                            eru[rc],eproj[rc],elocation[rc],efs[rc],eatt[rc],erecip[rc],ecompFee[rc],ebillFlag[rc],
                            edesc[rc],eskip[rc])
            endif
            'exclude perviously created billable event
            'needed for multiple episodes of pasrr
            if skip_rolled = "Y" and $find(eser[rc], bill_sacs[], 1, "F") > 0 then
               $clear(edate[rc],estart[rc],eclient[rc],eduration[rc],ekey[rc],eser[rc],eclient-duration[rc],estaff[rc],
                            eru[rc],eproj[rc],elocation[rc],efs[rc],eatt[rc],erecip[rc],ecompFee[rc],ebillFlag[rc],
                            edesc[rc],eskip[rc])
            endif
         enddo
         
         (void)$sort(edate[],"D",estart[],"D",eclient[],eduration[],"D",ekey[],eser[],eclient-duration[],estaff[],
                            eru[],eproj[],elocation[],efs[],eatt[],erecip[],ecompFee[],ebillFlag[],edesc[],eskip[])

         rc = 0
         do while rc++ < $maxarray(ekey[])
            ekey[rc] = $erkeyn(ekey[rc])
         enddo
         
         'calculate number of events for the current client
         nbrevents = $maxarray(estaff[])
  
         'display prompts on window.
         if do-ui = "Y" then
            if $bui = "Y" then
               'bui
            else
               $disp($format( nbrevents, "ZZZ,ZZ9"),13,45,,)
            endif
         endif
         
         
         foundEvent = 0
         skipEvent = 0
          
         'Remove non-valid service codes from the arrays
         eventloop = 0
         do while eventloop++ < nbrevents

            ' Look for valid services
            if $find( eser[eventloop], validServices[],, "F") > 0 then
               foundEvent++
               ' Show the services
               WriteEvents(reportNbr, clientIds[nbrclients], estaff[eventloop], edesc[eventloop],edate[eventloop], estart[eventloop],
                                  eser[eventloop],eduration[eventloop],eclient-duration[eventloop],eru[eventloop],eproj[eventloop],
                                  elocation[eventloop],efs[eventloop],eatt[eventloop],erecip[eventloop],ebillflag[eventloop],
                                  ecompFee[eventloop],$erkeyx(ekey[eventloop]), skipReport, eskip[eventloop])

               serviceIndex = getIndex(ServiceType, eser[eventloop], eru[eventloop])
                                  
               ' save the billing service
               rc = $find(eser[eventloop], bill_sacs[], 1, "F")
               if rc > 0 then
                  billErKey[`roll_sacs[rc]`] = $erkeyx(ekey[eventloop],)

               else  ' Must be one of the Flag or rollup services

                  if eskip[eventloop] = "Y" then
                     skipEvent++
                  else
                  
                     ' Save the event Key
                     erKeyIndex = $maxarray(markErKey[serviceIndex])
                     
                     markErKey[serviceIndex, ++erkeyIndex] = $erkeyx(ekey[eventloop])
                     markErDate[serviceIndex, erKeyIndex] = edate[eventloop]
                     markErF2F[serviceIndex, erKeyIndex] = isF2F(eduration[eventloop], eclient-duration[eventloop], 
                                                   eatt[eventloop], erecip[eventloop], elocation[eventloop],
                                                   f2f_att, f2f_recip, f2f_loc)
                     
                     rc = f2fIndex[serviceIndex]
                     if  markErF2F[serviceIndex, erKeyIndex] = "Y" 
                     and (markErDate[serviceIndex, erKeyIndex] < markErDate[serviceIndex, rc] 
                          or rc !dp) then
                        f2fIndex[serviceIndex] = erKeyIndex
                        
                        if bill-ser[serviceIndex] !dp then
                           bill-ser[serviceIndex] = bill_sacs[`$find(eser[eventloop], roll_sacs[], 1, "F")`]
                        endif
                        
                        if markErDate[serviceIndex, erKeyIndex] < pe-date[serviceIndex] or pe-date[serviceIndex] !dp then 
                           pe-date[serviceIndex] = markErDate[serviceIndex, erKeyIndex]
                        endif
                     endif

                     ' Is it a start/stop flag service
                     if  (eser[eventloop] = flag_sac
                          and eru[eventloop] = flag_ru
                          and eduration[eventloop] = flag_dur
                          and eclient-duration[eventloop] = flag_client_dur
                          and erecip[eventloop] = flag_recip
                          and eatt[eventloop] = flag_att
                          and elocation[eventloop] = flag_loc) then
                        
                        ' Is it the start or stop key
                        if allowNoFlags != "Y" then
                           if endErKey !DP then
                              endErKey = $erkeyx(ekey[eventloop],)
                              endErDate = edate[eventloop] - MaxPEDays
                           else
                              startErKey = $erkeyx(ekey[eventloop],)
                              'quit looping if we have the start and stop keys
                              eventloop = nbrevents
                           endif
                        endif
                         
                     ' Not one of the start/stop services
                     else
                        ' Is it before the start or stop key
                        if (endErKey DP or allowNoFlags = "Y" ) then
                           'check for date limit
                           if endErDate dp and edate[eventloop] < endErDate then
                              if skipReport != "Y" then
                                 (void) $print(reportNbr, "ERROR: Unable to find starting service marker")
                              endif
   
                              ' Reset the flags  
                              reset-counters(billErKey[], startErKey, endErKey, markErKey[], endErDate, erkeyIndex,
                                 billedStaffTime[], billedStaffTime[], unbilledStfTime[], unbilledCltTime[], f2fIndex[])              
                           else
                              
                              ' Must be a service to roll-up
                              if serviceIndex > 0 then
                                 
                                 if (ebillflag[eventloop] = "Y") then
                                     billedStaffTime[serviceIndex]  += eduration[eventloop]
                                     billedClientTime[serviceIndex] += eclient-duration[eventloop]
                                 else
                                     unbilledStfTime[serviceIndex] += eduration[eventloop]
                                     unbilledCltTime[serviceIndex] += eclient-duration[eventloop]
                                     
'                                     ' Save the event Key
'                                     markErKey[++erkeyIndex] = $erkeyx(ekey[eventloop])
                                 endif
                              endif
                           endif
                        else
                           if skipReport != "Y" then
                              (void) $print(reportNbr, "ERROR: Service outside of start/end markers")
                           endif
                        endif   ' End of have endErKey
                     endif   ' End of not start/stop service
                  endif ' end of non-skiped event
               endif   ' End of Billable Service code
         endif   ' End of Valid Service
      enddo 'end loop through events

         'roll up the services
         serviceIndex = 0
         do while $findnextent(f2fIndex[], serviceIndex) > 0   'generate bills based on presence of f2f events
         
            ' If we have a bill event check for errors
            if (billErKey[serviceIndex] DP) then
                if skipReport != "Y" then
                   checkTimes(reportnbr, billErKey[serviceIndex], billedStaffTime[serviceIndex], billedStaffTime[serviceIndex], unbilledStfTime[serviceIndex], unbilledCltTime[serviceIndex])
                endif
            else
                ' Create bill Service
                erKeyIndex = f2fIndex[serviceIndex]
                rc = createNewEvent(reportnbr, runMode, markErKey[serviceIndex, erKeyIndex], 
                  unbilledStfTime[serviceIndex], unbilledCltTime[serviceIndex], skipReport, 
                  pe-date[serviceindex], bill-ser[serviceIndex],
                  roundTime, timeToRound, cltUseRoundTime, stfUseRoundTime, isnUseRoundTime)
                ' did we create a event
                if (rc = 0) then
                    evtCreatedCtr++
                    billErKey[serviceIndex] = $erkey    'set the billerkey to the event we just created
                    ' mark the original flag and roll-up services as billed
                    markEventsBilled(reportNbr, markErKey[serviceIndex], skipReport)
                endif
            endif
         enddo
         if serviceIndex = 0 then
            'error no face to face services found??
         endif
         ' Reset the flags (except for billErKey)
         reset-counters(        , startErKey, endErKey, markErKey[], endErDate, erkeyIndex, 
               billedStaffTime[], billedStaffTime[], unbilledStfTime[], unbilledCltTime[], f2fIndex[])
               
          'Do we have any events left for this client
        if (foundEvent > 0) then
           if skipReport != "Y" then
             (void) $print(reportNbr, "")    ' Blank line
          endif
        endif   ' end of have events
  
      'update no. of events processed.
      if do-ui = "Y" then
         if $bui = "Y" then
            'bui
         else
            MsgString = $format( evtCreatedCtr, "ZZZ,ZZ9")
            $disp(MsgString,10,45,,)
         endif
      endif
  
        endif 'end process only if events found
    endif 'end do not process group ids if statement
  
    $clear(MsgString,PrintString)
enddo 'end loop through clients
nbrclients--    ' Fix Clients processed count

'Print Overall Totals
if skipReport != "Y" then
   PrintString = $format(numclients,    "Number of Clients to Process: ZZZ,ZZ9")
   (void) $print(reportNbr, PrintString, "1")
   PrintString = $format(nbrclients,    "           Clients Processed: ZZZ,ZZ9")
   (void) $print(reportNbr, PrintString, "1")
   PrintString = $format(evtCreatedCtr, "        Total Events Created: ZZZ,ZZ9")
   (void) $print(reportNbr, PrintString, "1")

   'cleanup
   (void) $closereport(reportNbr)
endif

'Cleanup - Close Message Windows
if do-ui = "Y" then
   if $bui = "Y" then
      'bui
   else
      $disp("Done. Press the ENTER key to continue...    ",16,18,,"H")
      $acpt(done,16,58,1,)
      $closewin(WinNum) ' Close the Text window
   endif
endif

end PASRRBilling


'***********************************************************************
'*                           SUPPORTING FUNCTIONS                      *
'***********************************************************************

%include inc_GetParm
%include inc_GetOption

' this function is to check the staff/client duration of the existing
' rolled up service with the times calculated.  The billed time should
' match w/ the rolled up service.  There should not be any unbilled time.
function checkTimes(reportnbr, billErKey, billedStaffTime, billedClientTime, unbilledStfTime, unbilledCltTime, skipReport) is null

    reportNbr       is binary   ' Report Handle
    billErKey     is alpha    ' Event Key
    billedStaffTime is binary   ' Billed Staff Duration
    billedClienttime is binary  ' Billed Client Duration
    unbilledStfTime is binary   ' UnBilled Staff Duration
    unbilledCltTime is binary   ' Unbilled Client Duration
    skipReport       is alpha

    rc              is binary   ' Function return code
    reportMessage   is alpha    ' Report line message
    
    'Event DSTs
    E.PROJ        is binary
    E.LOC         is alpha
    E.BILL.ST     is alpha    
    E.POST.FLG    is alpha
    E.BILL.FLG    is alpha
    E.SER         is binary
    E.CASE.NO     is alpha
    E.STAFF       is alpha
    E.DATE        is date
    E.RU          is binary
    E.DUR         is time
    E.START       is time
    E.CL.DUR      is time
    E.RECIP       is alpha
    E.ATT         is alpha
    E.FS          is binary
    E.DESC        is alpha
    E.COMP.FEE    is numeric

    ' Get the requested Event
    $erkey = $erkeyn(billErKey)
    rc = $readevent(E.PROJ, E.LOC, E.BILL.ST, E.POST.FLG, E.BILL.FLG, E.SER, E.CASE.NO, E.STAFF, E.DATE, E.RU, E.DUR, 
                        E.START, E.CL.DUR, E.RECIP, E.ATT, E.FS, E.DESC, E.COMP.FEE)
    if (rc > 0) then
        reportMessage = $format( rc, "ERROR: Unable to get the Rolled Up service... rc=99")
        (void) $print(reportNbr, reportMessage)
    else
        WriteEvents(reportNbr, E.CASE.NO, E.STAFF, E.DESC, E.DATE, E.START, E.SER, E.DUR, E.CL.DUR, E.RU, E.PROJ, 
                                E.LOC, E.FS, E.ATT, E.RECIP, E.BILL.FLG, E.COMP.FEE, billErKey, skipReport)

        ' check for billed time errors
        if (billedStaffTime  != E.DUR
         or billedClientTime != E.CL.DUR) then
            reportMessage = "ERROR: Billed times for rolled up services does not match calculated time"
            (void) $print(reportNbr, reportMessage)
        endif
        
        ' We have service not included in the rolled up service
        if (unbilledStfTime > 0
         or unbilledCltTime > 0) then
            reportMessage = "ERROR: There are events that were not included in the rolled up service time"
            (void) $print(reportNbr, reportMessage)
        endif
    endif
end checkTimes

function createNewEvent(reportnbr, runMode, billErKey, unbilledStfTime, unbilledCltTime, skipReport, pe-date, service,
                        roundTime, timeToRound, cltUseRoundTime, stfUseRoundTime, isnUseRoundTime) is binary

   reportNbr       is binary   ' Report Handle
   runMode         is alpha    ' Run Mode (T=Test / P=Production)
   billErKey     is alpha    ' Event Key
    billISNKey       is alpha    'ISN Key of the Billed Event
   unbilledStfTime is binary   ' UnBilled Staff Duration
   unbilledCltTime is binary   ' Unbilled Client Duration
   skipReport       is alpha
   pe-date          is date
   service          is binary
   
   'options from main script
   roundTime         is binary
   timeToRound       is alpha
   cltUseRoundTime   is alpha
   stfUseRoundTime   is alpha
   isnUseRoundTime   is alpha

   rc              is binary   ' Function return code
   reportMessage   is alpha    ' Report line message
   rounded-time      is time
   
   'Event DSTs
   E.PROJ        is binary
   E.LOC         is alpha
   E.SER         is binary
   E.CASE.NO     is alpha
   E.STAFF       is alpha
   E.DATE        is date
   E.RU          is binary
   E.DUR         is time
   E.START       is time
   E.CL.DUR      is time
   E.RECIP       is alpha
   E.ATT         is alpha
   E.FS          is binary
   E.DESC        is alpha
   E.COMP.FEE    is numeric
   
   er-rec         is alpha
   e.std.fee      is num
'   e.comp.fee     is num
   
   $$isn.rdur     is time

   ' Get the requested Event
   $erkey = $erkeyn(billErKey)
   rc = $readevent(E.PROJ, E.LOC, E.SER, E.CASE.NO, E.STAFF, E.DATE, E.RU, E.DUR, 
                       E.START, E.CL.DUR, E.RECIP, E.ATT, E.FS, E.DESC, E.COMP.FEE)
   if (rc > 0) then
      reportMessage = $format( rc, billErKey, "ERROR: Unable to get the last roll up service... rc=99 (L~~~~~~~~~~~~~~~~~~~~)")
      (void) $print(reportNbr, reportMessage)
   else

      ' Update the event info
      E.DUR    = unbilledStfTime
      E.CL.DUR = unbilledCltTime
      E.COMP.FEE = 0.00
      E.SER    = service
      E.DESC   = "Billable PASRR PE"
      E.DATE   = pe-date
   
      (void) $print(reportNbr, "==================================")   ' Separator
      ' Write out the new event info    
      WriteEvents(reportNbr, E.CASE.NO, E.STAFF, E.DESC, E.DATE, E.START, E.SER, E.DUR, 
                             E.CL.DUR, E.RU, E.PROJ, E.LOC, E.FS, E.ATT, E.RECIP, "N", E.COMP.FEE,,skipreport)

      ' Create the new event
      ' Are we in Production Mode
      if (runMode = "P") then
         rc = $insertevent(E.PROJ, E.LOC, E.SER, E.CASE.NO, E.STAFF, E.DATE, E.RU, E.DUR, 
                           E.START, E.CL.DUR, E.RECIP, E.ATT, E.FS, E.DESC, E.COMP.FEE)
         if rc > 0 then
             ' Show the error message
             reportMessage = $format(rc, "ERROR: unable to create a roll up Service... rc=99")
             (void) $print(reportNbr, reportMessage)
         else
            
            'check to see if the ISN has been created, if not create it.
            
            rc = $isnfind(billISNKey,E.CASE.NO,E.STAFF,E.DATE,E.START,E.SER)
            if rc = 1
               rc = $isncreate("T",,,$erkey)
            endif
            
            'process rounding options after the orginal event and isn get created to keep the paper trail of
            'original times
            
            ' round the total time?
            if roundTime dp then
               
               $erlock()
               rc = $readevent(e.cl.dur, e.dur)
               
               if $uc(timeToRound) = "STAFF" then
                  rounded-time = unbilledStfTime
               else
                  rounded-time = unbilledCltTime
               endif
               rounded-time = $round(rounded-time, roundTime)
            
               if $uc(cltUseRoundTime) = "Y" then
                  e.cl.dur = rounded-time
               endif
               
               if $uc(stfUseRoundTime) = "Y" then
                  e.dur = rounded-time
               endif
               rc = $geterrec(er-rec)
               rc = $putervars(er-rec, e.cl.dur, e.dur)
               rc = $feecomp(er-rec, e.std.fee, e.comp.fee, e.fs)               
               rc = $updateevent(e.cl.dur, e.dur, e.std.fee, e.comp.fee)
               
          
               if $uc(isnUseRoundTime) = "Y" then
                  $$ISN.RDUR = rounded-time
                  $dblock()
                  rc = $dbpoint(9, $isnkey, $$ISN.RDUR)
                  rc = $dbadddst(9, $isnkey, $$ISN.RDUR)
               endif
            endif
         endif
      else
         ' Fake an error if not in production.
         rc = 99
      endif
   endif
   (void) $print(reportNbr, "")
   
   createnewEvent = rc
end createNewEvent


'This function is to mark all the events as billed in the array.
'Any event that can not be updated as billed will print out on the report.
function markEventsBilled(reportNbr, markErKey[], skipReport) is null

    reportNbr   is binary  'Report Handle
    markErKey[] is alpha   'Event keys to mark as billed
    skipReport    is alpha

    erIndex     is binary   'Array Index
    rc          is binary   'Function return code
    reportMessage is alpha  'Report error message line
    
    'Event DSTs
    E.PROJ     is binary
    E.LOC      is alpha
    E.BILL.FLG is alpha
    E.SER      is binary
    E.CASE.NO  is alpha
    E.STAFF    is alpha
    E.DATE     is date
    E.RU       is binary
    E.DUR      is time
    E.START    is time
    E.CL.DUR   is time
    E.RECIP    is alpha
    E.ATT      is alpha
    E.FS       is binary
    E.DESC     is alpha
    E.COMP.FEE is numeric

    erIndex = 0
    do while erIndex++ < $maxarray(markErKey[])
        ' Get the requested Event
        $erkey = $erkeyn(markErKey[erIndex])
        $erlock()   ' Try to lock the event
        rc = $readevent(E.PROJ, E.LOC, E.BILL.FLG, E.SER, E.CASE.NO, E.STAFF, E.DATE, E.RU, E.DUR, 
                            E.START, E.CL.DUR, E.RECIP, E.ATT, E.FS, E.DESC, E.COMP.FEE)
        if (rc > 0) then
            ' Write out the new event info    
            WriteEvents(reportNbr, E.CASE.NO, E.STAFF, E.DESC, E.DATE, E.START, E.SER, E.DUR, E.CL.DUR, E.RU, E.PROJ, 
                                    E.LOC, E.FS, E.ATT, E.RECIP, E.BILL.FLG, E.COMP.FEE, markErKey[erIndex], skipReport)
            reportMessage = $format( rc, "ERROR: Unable to find the original service... rc=99")
            (void) $print(reportNbr, reportMessage)
        else
            ' Update the event info
            E.BILL.FLG = "Y"
            rc = $updateeventxx(E.BILL.FLG)
            if (rc > 0) then
                ' Write out the new event info    
                WriteEvents(reportNbr, E.CASE.NO, E.STAFF, E.DESC, E.DATE, E.START, E.SER, E.DUR, E.CL.DUR, E.RU, E.PROJ, 
                                        E.LOC, E.FS, E.ATT, E.RECIP, E.BILL.FLG, E.COMP.FEE, markErKey[erIndex], skipReport)
                reportMessage = $format( rc, "ERROR: Unable to mark the service as billed... rc=99")
                (void) $print(reportNbr, reportMessage)
            endif
        endif
    enddo
end markEventsBilled

'This is the main routine to print out the event information on a report
function WriteEvents(reportNbr,clientID,newStaff,newDesc,newDate,newStart,newSer,newStfDur,newClntDur,newRu,newProj,
                        newLocation,newFs,newAtt,newRecip,newBillFlag,newCompFee, newerkey, skip, er_skipped) is null

   reportNbr    is      binary  'Report Handle
   clientID     is      alpha   'event Client ID
   newStaff     is      alpha   'event staff ID
   newDesc      is      alpha   'event description
   newDate      is      date    'event service date
   newStart     is      time    'event service start time
   newSer       is      binary   'event service code
   newStfDur   is       time     'event staff duration
   newClntDur  is       time     'event client duration 
   newRu        is      binary   'event RU
   newProj      is      binary  'event project code
   newLocation is       alpha    'event location code
   newFs        is      binary  'event funding source
   newAtt       is      alpha   'event attendance code
   newRecip     is      alpha   'event recipient code
   newBillFlag is       alpha    'event billing flag
   newCompFee   is      numeric  'event computed fee
   newerkey     is      alpha   'event erkey
   skip         is      alpha 
   er_skipped    is      alpha    'the event is marked be be skipped for processing
   
   if skip = "Y" then return endif

      'Local variables
   PrintString is    alpha   'Output Concatenation String
   fmt           is      alpha

   fmt =    "~ L~~~~~~~~ L~~~~~ MM/DD/YY  HH:MM ZZZZ HH:MM HH:MM  ZZZZ  ~~~ Z,ZZ9.99   ZZZ   ~   ~  ZZZZ   ~   L~~~~~~~~~~~~~~~~~~~~" 
   PrintString = $format(er_skipped, clientID,newStaff,newDate,newStart,newSer,newStfDur,newClntDur,newRu,newLocation,
                            newCompFee,newFs,newAtt,newRecip,newProj,newBillFlag,newerkey,fmt)
   (void)$print(reportNbr,PrintString,"1")
  
end WriteEvents

function delim-wrap(str, delim) is x
str         is x
delim       is x
delim-wrap = delim + str + delim
end delim-wrap

function reset-counters(rollkey, startkey, endkey, markkey[], enddate, keyIdx, bstime[], bctime[], ustime[], uctime[],f2fIdx) is null
rollkey     is x
startkey    is x
endkey      is x
markkey[]   is x
enddate     is d
keyidx      is b
bstime[]      is b
bctime[]      is b
ustime[]      is b
uctime[]      is b
f2fidx[]      is b

$allowupdate(rollkey, startkey, endkey, markkey[], enddate, keyIdx, bstime[], bctime[], ustime[], uctime[], f2fidx[])

$clear(rollkey, startkey, endkey, markkey[], enddate, bstime[], bctime[], ustime[], uctime[], f2fidx[])
keyIdx = 0          ' Saved ER key index
'bstime = 0     ' Total Billed Time for Roll-Up
'bctime = 0    ' Total Billed Time for Roll-Up
'ustime = 0     ' Total UnBilled Time for Roll-Up
'uctime = 0     ' Total UnBilled Time for Roll-Up
'f2fidx = 1

end reset-counters

function isF2F(sdur, cdur, att, recip, loc, f2f-att, f2f-recip, f2f-loc) is x
sdur     is time
cdur     is time
att      is alpha
recip    is alpha
loc      is alpha

'options
f2f-att     is alpha
f2f-recip   is alpha
f2f-loc     is alpha

isF2F = "N"

att = delim-wrap(att, ",")
recip = delim-wrap(recip, ",")
loc = delim-wrap(loc, ",")

if sdur > 0
and cdur > 0
and $find(att, f2f-att, 1, "F") > 0
and $find(recip, f2f-recip, 1, "F") > 0
and $find(loc, f2f-loc, 1, "F") > 0 then
   isF2F = "Y"
endif

end isF2F

function getIndex(s-type, s-ser, s-ru) is b
s-type is x
s-ser  is b
s-ru   is b

select s-type
   case "RU"   getIndex = s-ru
   case "SAC"  getIndex = s-ser
endselect

end getIndex

function allmatch(value, arr-vals[]) is x
value is b
arr-vals[] is b
i is b

allmatch = "Y"

i = 0
do while i++ < $maxarray(arr-vals[])
'   arr-vals[i] = arr-vals[i]
   if arr-vals[i] != value then
      allmatch = "N"
      i = $maxarray(arr-vals[])
   endif
enddo
end allmatch


'***********************************************************************
'*                       END SUPPORTING FUNCTIONS                      *
'***********************************************************************
